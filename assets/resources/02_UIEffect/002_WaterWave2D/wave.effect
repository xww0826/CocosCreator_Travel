CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        startColor: { 
          value: [1, 1, 1, 1],
          editor: { type: color, tooltip: "开始颜色" }
        }
        endColor: { 
          value: [1, 1, 1, 1],
          editor: { type: color, tooltip: "结束颜色" }
        }
        mainTexture: { value: white }
        noiseTexture: { value: white }

}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec4 v_time;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    v_time = cc_time;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;
  in vec4 v_time;
  
  uniform Constant {
      vec4 startColor;
      vec4 endColor;
  };

  uniform sampler2D mainTexture;
  uniform sampler2D noiseTexture;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    // vec4 o = vec4(1);
    // vec4 noise = vec4(1);
    // float t = v_time.x * 0.6;
    // vec2 uv_temp = uv0;

    // #if USE_TEXTURE
    //   o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    // #endif

      // o *= texture(noiseTexture, uv0 + v_time.x * 0.3);
      // float isH = step(0.1, 0.3);
      // float isV = step(0.1, 0.2);
      // uv_temp.x += noise.x * 0.2 * isH;
      // uv_temp.y += noise.x * 0.2 * isV;


       vec4 col = startColor * texture(mainTexture, uv0);
       vec2 uv=uv0;
      uv.x+=v_time.x*0.5;
      uv.y+=v_time.x*0.5;
      vec4 noiseCol=texture(noiseTexture, uv);
      if(noiseCol.r>0.9){  
    col=vec4(1.0,1.0,1.0,0.7);
  }else{   
     col.a=0.6;
  }

    // ALPHA_TEST(o);
    return col;
  }
}%
