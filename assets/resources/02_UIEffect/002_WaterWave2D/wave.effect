CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        # 噪声纹理
        noisetex: { value: white }
        speedFactor: {
          value: 0.1,
          editor: {
            tooltip: "速度",
            range: [0.0, 1.0],
          }
        }
        strengthFactor: {
          value: 0.1,
          editor: {
            tooltip: "强度",
            range: [-0.5, 0.5],
          }
        }
        isHorizontal: {
            value: 0,
            editor: {
              tooltip: "横向扭曲",
              range: [0.0, 1.0],
            }
        }
        isVertical: {
            value: 0,
            editor: {
              tooltip: "纵向扭曲",
              range: [0.0, 1.0],
            }
        }
}%


CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_texCoord;
  out vec2 uv0;
  #endif
  out vec4 v_time;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

     v_color = a_color;
     uv0 =a_texCoord;
     v_time = cc_time;
    return pos;
  }
}%

CCProgram sprite-fs %{
   precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
 

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif


  #if USE_NOISETEX
  uniform sampler2D noisetex;
  #endif

  uniform Factor {
      float speedFactor;
      float strengthFactor;
      float isHorizontal;
      float isVertical;
  };
 in vec4 v_time;
  vec4 frag () {
    vec4 o =vec4(1);
    vec4 noise = vec4(1);

    vec2 uv_temp = uv0;
      // 采样噪声纹理
    #if USE_NOISETEX
       noise *= texture(noisetex, uv0.xy + v_time.x * speedFactor);
    #endif
      // 偏移uv
      // uv_temp += noise.xy * strengthFactor;
      float isH = step(0.1, isHorizontal);
      float isV = step(0.1, isVertical);

      uv_temp.x += noise.x * strengthFactor * isH;
      uv_temp.y += noise.y * strengthFactor * isV;

    #if USE_TEXTURE
      o *=CCSampleWithAlphaSeparated(cc_spriteTexture, uv_temp);
    #endif

    o *=v_color;
    ALPHA_TEST(o);
    return o;
  }
}%
