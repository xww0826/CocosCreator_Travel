CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        angle: { value: 0.5 }
        offset: { value: 0.5 }
        uvRatio: { value: 0.5 }
        startColor: { 
          value: [1, 1, 1, 1],
          editor: { type: color, tooltip: "开始颜色" }
        }
        endColor: { 
          value: [1, 1, 1, 1],
          editor: { type: color, tooltip: "结束颜色" }
        }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;
  
  uniform Constant {
      vec4 startColor;
      vec4 endColor;
  };

  uniform Adjust {
      float angle;
      float offset;
      float uvRatio;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      // #if IS_GRAY
      //   float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
      //   o.r = o.g = o.b = gray;
      // #endif
      float angleInRadians = radians(angle); 
      float ratio = clamp((uv0.y * cos(angleInRadians) + uv0.x * sin(angleInRadians) + offset) * uvRatio, 0.0, 1.0);
      float startRatio = 1.0 - ratio;
      float endRatio = ratio;
    #endif

    #if USE_VERTICAL
      o.r *= startColor.r * startRatio + endColor.r * endRatio;
      o.g *= startColor.g * startRatio + endColor.g * endRatio;
  		o.b *= startColor.b * startRatio + endColor.b * endRatio;
    #endif

    #if USE_HORIZONTAL
      o.r *= startColor.r * startRatio + endColor.r * endRatio;
      o.g *= startColor.g * startRatio + endColor.g * endRatio;
  		o.b *= startColor.b * startRatio + endColor.b * endRatio;
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
